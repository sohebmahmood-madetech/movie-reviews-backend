package com.madetech.soheb.moviereviewsbackend.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;

@Service
public class TokenGenerationService {
    
    private static final Logger logger = LoggerFactory.getLogger(TokenGenerationService.class);
    private static final String ALLOWED_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    private static final int DEFAULT_TOKEN_LENGTH = 128;
    private static final int MIN_TOKEN_LENGTH = 64;
    private static final int MAX_TOKEN_LENGTH = 256;
    
    private final SecureRandom secureRandom;
    
    public TokenGenerationService() {
        this.secureRandom = new SecureRandom();
        
        // Force seeding of SecureRandom for better entropy
        byte[] seed = this.secureRandom.generateSeed(64);
        this.secureRandom.setSeed(seed);
        
        logger.info("Initialized TokenGenerationService with SecureRandom");
    }
    
    /**
     * Generates a cryptographically secure random token suitable for film submission authentication.
     * 
     * @return A random token string containing only alphanumeric characters
     */
    public String generateFilmSubmissionToken() {
        return generateSecureToken(DEFAULT_TOKEN_LENGTH);
    }
    
    /**
     * Generates a cryptographically secure random token with specified length.
     * 
     * @param length The desired length of the token (between 64 and 256 characters)
     * @return A random token string containing only alphanumeric characters
     * @throws IllegalArgumentException if length is outside valid range
     */
    public String generateSecureToken(int length) {
        if (length < MIN_TOKEN_LENGTH || length > MAX_TOKEN_LENGTH) {
            throw new IllegalArgumentException(
                String.format("Token length must be between %d and %d characters", MIN_TOKEN_LENGTH, MAX_TOKEN_LENGTH)
            );
        }
        
        StringBuilder token = new StringBuilder(length);
        
        for (int i = 0; i < length; i++) {
            int randomIndex = secureRandom.nextInt(ALLOWED_CHARACTERS.length());
            token.append(ALLOWED_CHARACTERS.charAt(randomIndex));
        }
        
        String generatedToken = token.toString();
        logger.debug("Generated secure token with length: {}", length);
        
        return generatedToken;
    }
    
    /**
     * Validates that a token meets the security requirements for film submission tokens.
     * 
     * @param token The token to validate
     * @return true if the token meets security requirements, false otherwise
     */
    public boolean isValidTokenFormat(String token) {
        if (token == null || token.trim().isEmpty()) {
            return false;
        }
        
        String trimmedToken = token.trim();
        
        // Check length requirements
        if (trimmedToken.length() < MIN_TOKEN_LENGTH || trimmedToken.length() > MAX_TOKEN_LENGTH) {
            return false;
        }
        
        // Check that token only contains allowed characters
        for (char c : trimmedToken.toCharArray()) {
            if (ALLOWED_CHARACTERS.indexOf(c) == -1) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * Gets the entropy (in bits) of a token generated by this service.
     * 
     * @param tokenLength The length of the token
     * @return The entropy in bits
     */
    public double getTokenEntropy(int tokenLength) {
        double alphabetSize = ALLOWED_CHARACTERS.length();
        return tokenLength * (Math.log(alphabetSize) / Math.log(2));
    }
}